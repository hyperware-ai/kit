name: Deploy kit Create Release

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "v0.7.4"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Build the release
        run: ./scripts/build-release.py
      - name: Unzip the build output
        run: unzip /tmp/kit-release/kit-x86_64-unknown-linux-gnu.zip

      #- name: Get latest release from kinode-dao/kit
      #  id: get-latest-kinode-release
      #  uses: actions/github-script@v6
      #  with:
      #    script: |
      #      const repo = {
      #        owner: 'kinode-dao',
      #        repo: 'kinode',
      #      };
      #      const release = await github.rest.repos.getLatestRelease(repo);
      #      const asset = release.data.assets.find(asset => asset.name.match(/kinode-x86_64-unknown-linux-gnu\.zip/));
      #      if (!asset) {
      #        throw new Error('Asset not found');
      #      }
      #      return asset.browser_download_url;
      #    result-encoding: string
      - name: Download the Kinode release
        run: wget -q https://files.yael.solutions/240906/kinode-x86_64-unknown-linux-gnu-simulation-mode.zip -O kinode.zip
        #run: wget -q ${DOWNLOAD_URL} -O kinode.zip
        #env:
        #  DOWNLOAD_URL: ${{ steps.get-latest-kinode-release.outputs.result }}
      - name: Unzip the Kinode release
        run: unzip kinode.zip

      - name: Run tests
        run: ./kit t src/new/templates/test.toml
